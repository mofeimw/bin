#!/bin/bash
#
# mofei's notion => motion

# =============
#    syntax
# =============
parse() {
    for ((z = ${#contents[@]}; z >= 0; z--)); {
        line=${contents[$z]}

        # || comment
        [[ $line =~ ^\|\| ]] && continue

        if [ -z "$line" ]; then
            if [ $code -eq 0 ]; then
                body+=("")
                continue
            else
                body+=("<br>")
                continue
            fi
        fi

        # ====== h1 ======
        if [[ $line =~ ^==+$ ]]; then
            next="h1"

        # ====== h2 ======
        elif [[ $line =~ ^--+$ ]]; then
            next="h2"

        # ====== h3 ======
        elif [[ $line =~ ^###[[:blank:]](.+)$ ]]; then
            body+=("<h3>${BASH_REMATCH[1]}</h3>")

        # ====== h4 ======
        elif [[ $line =~ ^####[[:blank:]](.+)$ ]]; then
            body+=("<h4>${BASH_REMATCH[1]}</h4>")

        # ====== code ======
        elif [ "$line" = '$$$' ]; then
            if [ $code -eq 1 ]; then
                body+=("</pre>")
                code=0
            elif [ $code -eq 0 ]; then
                body+=("<pre>")
                code=-1
            fi

        # ====== list ======
        elif [[ $line =~ ^-[[:blank:]](.+)$ ]]; then
            line=$(fmt "${BASH_REMATCH[1]}")
            body+=("    <li>$line</li>")

        # ====== nested list ======
        elif [[ $line =~ '    '-[[:blank:]](.+)$ ]]; then
            line=$(fmt "${BASH_REMATCH[1]}")
            body+=("        <li>$line</li>")

        # ====== plain text ======
        elif [[ $line =~ ^[\*#\$!_/[:alnum:]].+$ ]]; then
            line=$(fmt "$line")
            if [ $code -ne 0 ]; then
                if [ -n "$next" ]; then
                    body+=("<${next}>$line</${next}>")
                    next=""
                else
                    body+=("<p>$line</p>")
                fi
            else
                body+=("<code>$line</code>")
            fi

        # fallthrough
        else
            line=$(fmt "$line")
            if [ -n "$next" ]; then
                body+=("<${next}>$line</${next}>")
                next=""
            else
                body+=("$line")
            fi
        fi
    }
}

# =============
#    format
# =============
fmt() {
    fmted="$1"

    # ** is italicized
    for i in {1..10}; {
        fmted=$(printf '%s' "$fmted" | sed -E 's|(.*)\*\*(.+)\*\*(.*)|\1<i>\2</i>\3|g')

        echo "$fmted" | grep -q "\*\*"
        [ $? -ne 0 ] && break
    }

    # * is bolded
    for i in {1..10}; {
        fmted=$(printf '%s' "$fmted" | sed -E 's|(.*)\*(.+)\*(.*)|\1<b>\2</b>\3|g')

        echo "$fmted" | grep -q "\*"
        [ $? -ne 0 ] && break
    }

    printf "$fmted"
}

main() {
    if [ -f "./$1" ]; then
        file="$1"
        project="${file%\.mw}"
    else
        printf "\033[1m\033[35mproject: \033[m"
        read project

        [ ! -f "./${project}.mw" ] && {
            printf "\033[1m\033[31m${project}.mw does not exist\033[m\n"
            exit 1
        }

        file="${project}.mw"
    fi

    contents=()
    # IFS=$'\n' read -d '' -ra file < "$file"
    IFS=$'\n'
    while read -r line; do
        contents+=("$line")
    done < "./$file"

# ============= html =============
    css
    html=$(cat <<-END
<!DOCTYPE html>
<html>
    <head>
        <title>$project</title>
        <style>
$css
        </style>
    </head>
    <body>
END
    )
# ======================================

    body=()
    code=1
    next=""

    parse

    # run it back
    for ((z = ${#body[@]}; z >= 0; z--)); {
        # ------ list nesting ------
        re='<li>'

        # close out 2nd level of nesting
        # if the previous element was a list but the current one is not
        if [ $z -ne $((${#body[@]} - 1)) ] && [[ ${body[$z + 1]} =~ '        '$re ]]; then
            if [[ ! ${body[$z]} =~ '        '$re ]]; then
                html+="            </ul>\n"
            fi
        fi

        # close out 1st level of nesting
        # if the previous element was a list but the current one is not
        if [ $z -ne $((${#body[@]} - 1)) ] && [[ ${body[$z + 1]} =~ '    '$re ]]; then
            if [[ ! ${body[$z]} =~ '    '$re ]]; then
                html+="        </ul>\n"
            fi
        fi

        # open a 1st level
        # if the next element is a list but the current one is not
        if [ $z -ne 0 ] && [[ ${body[$z - 1]} =~ $re ]]; then
            if [[ ! ${body[$z]} =~ '    '$re ]]; then
                html+="        ${body[$z]}\n"
                html+="        <ul>\n"
                continue
            fi
        fi

        # don't indent code blocks
        re2='<code>'
        if [[ ${body[$z]} =~ $re2 ]]; then
            html+="${body[$z]}\n"
        else
            html+="        ${body[$z]}\n"
        fi

        # open a 2nd level
        # if the next element is a list but the current one is not
        if [ $z -ne 0 ] && [[ ${body[$z - 1]} =~ '        '$re ]]; then
            if [[ ! ${body[$z]} =~ '        '$re ]]; then
                html+="            <ul>\n"
            fi
        fi
    }

    # close out nest if the last element is a list element
    if [[ ${body[0]} =~ '       '$re ]]; then
        html+="            <ul>\n"
        html+="        <ul>\n"
    elif [[ ${body[0]} =~ '    '$re ]]; then
        html+="        <ul>\n"
    fi

    html+=$(cat <<-END
        <footer>
            <p>mofei</p>
        </footer>
    </body>
</html>
END
    )

    printf "$html" > "${project}.html"
    printf "\033[1m\033[35m[motion]\033[m rendered to \033[1m\033[32m${project}.html\033[m\n"
}

css() {
    css=$(cat <<]END
/* START [ */
@import url('https://fonts.googleapis.com/css2?family=Fira+Code:wght@400;500&family=Poppins:ital,wght@0,700;1,700&family=Yrsa:ital,wght@0,400;0,500;0,700;1,400;1,500;1,700&display=swap');

*, *:before, *:after {
    scrollbar-width: none;
    box-sizing: inherit;
}

html { box-sizing: border-box; }

body::-webkit-scrollbar {
    display: none;
}

body, h1, h2, h3, h4, h5, h6, p, ol, ul {
    margin: 0;
    padding: 0;
}

body {
    background-color: #232530;
    color: #F9CEC3;
    font-family: Yrsa, serif;
    font-size: 19px;
    line-height: 18px;
    text-transform: lowercase;
    padding: 50px 60px 32px;
    overflow-y: scroll;
}

h1 {
    color: #D4516f;
    font-family: Yrsa, serif;
    font-size: 58px;
    line-height: 20px;
    margin-top: 6px;
    margin-bottom: 19px;
}

h2 {
    color: #1D8991;
    font-family: Poppins, sans-serif;
    font-size: 27px;
    font-weight: 700;
    line-height: 27px;
    letter-spacing: 0.7px;
    margin-top: 13px;
    margin-bottom: 13px;
}

h3 {
    color: #63798F;
    font-family: Yrsa, serif;
    font-size: 25px;
    font-weight: 700;
    line-height: 23px;
    margin-top: 6px;
    margin-bottom: 4px;
}

h4 {
    color: #9d75bd;
    font-family: Poppins, sans-serif;
    font-size: 17px;
    line-height: 23px;
    margin-bottom: 1px;
}

p {
    font-size: 19px;
    line-height: 23px;
}

b {
    color: #D4516f;
}

pre {
    background-color: #373a4f;
    color: #B08CCC;
    padding: 20px 20px 5px;
    border-radius: 6px;
    display: inline-block;
    line-height: 23px;
}

code {
    font-family: 'Fira Code', monospace;
    font-size: 14px;
    font-weight: 400;
    letter-spacing: -0.7px;
}

ul {
    list-style-type: disc;
    font-size: 18.5px;
    font-weight: 400;
    margin-left: 18px;
    padding: 0;
}

ul > ul {
    list-style-type: disc;
    margin-left: 40px;
}

li {
    line-height: 21px;
}

footer p {
    color: #D4516f;
    font-family: 'Fira Code', monospace;
    font-weight: 500;
    font-size: 15px;
    text-align: center;
    margin: 30px 0 0 0;
}
]END
    )
}

main "$@"
